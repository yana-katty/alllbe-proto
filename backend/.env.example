# ============================================
# Temporal Configuration
# ============================================
TEMPORAL_ADDRESS=localhost:7233
TEMPORAL_TASK_QUEUE=main

# ============================================
# WorkOS Configuration
# ============================================
# WorkOS APIキーの取得方法:
# 1. https://dashboard.workos.com/ にアクセス
# 2. 左サイドバーから "API Keys" を選択
# 3. "Test" タブを開く（Developmentモード）
# 4. API Key と Client ID をコピー
#
# ⚠️ 重要:
# - Development環境ではTest環境のAPIキーを使用（sk_test_ で始まるキー）
# - Production環境では本番環境のキーを使用
#
WORKOS_API_KEY=sk_test_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
WORKOS_CLIENT_ID=client_xxxxxxxxxxxxxxxxxxxxxxxx

# ============================================
# Auth0 Configuration
# ============================================
# Auth0 APIキーの取得方法:
# 1. https://manage.auth0.com/ にアクセス
# 2. Applications → Machine to Machine Applications
# 3. "Auth0 Management API" を選択
# 4. Domain, Client ID, Client Secret をコピー
#
AUTH0_DOMAIN=your-tenant.auth0.com
AUTH0_MANAGEMENT_CLIENT_ID=your_client_id
AUTH0_MANAGEMENT_CLIENT_SECRET=your_client_secret

# Database Connection 名（デフォルト: Username-Password-Authentication）
AUTH0_CONNECTION_NAME=Username-Password-Authentication

# ============================================
# Database Configuration
# ============================================
# Development: Neon Proxy または PostgreSQL
# Test: テスト用データベース
# Production: Neon または PostgreSQL
DATABASE_URL=postgresql://user:password@localhost:5432/alllbe

# ============================================
# Server Configuration
# ============================================
PORT=4000
NODE_ENV=development
LOG_LEVEL=info

# ============================================
# セットアップ手順
# ============================================
# 1. このファイルを `.env` にコピー
#    cp .env.example .env
#
# 2. 上記の値を実際の情報に書き換え
#
# 3. データベースのマイグレーション実行
#    npm run db:migrate
#
# 4. Temporal Server を起動（別ターミナル）
#    temporalite start --namespace default
#
# 5. Worker を起動（別ターミナル）
#    npm run dev:worker
#
# 6. tRPC Server を起動
#    npm run dev:server
